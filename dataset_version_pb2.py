# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dataset_version.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import dataset_pb2 as dataset__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='dataset_version.proto',
  package='',
  syntax='proto2',
  serialized_options=None,
  serialized_pb=_b('\n\x15\x64\x61taset_version.proto\x1a\rdataset.proto\"\xa3\x01\n\x13LogTfrecordsVersion\x12\r\n\x05token\x18\x01 \x01(\t\x12\x15\n\rexperiment_id\x18\x02 \x01(\t\x12 \n\x08metainfo\x18\x03 \x01(\x0b\x32\x0e.tfrecord_meta\x12\x0f\n\x07version\x18\x04 \x01(\t\x1a\x33\n\x08Response\x12\x10\n\x08response\x18\x01 \x01(\t\x12\x15\n\rresponse_code\x18\x02 \x01(\x05\"i\n\x13GetTfrecordsVersion\x12\r\n\x05token\x18\x01 \x01(\t\x12\x15\n\rexperiment_id\x18\x02 \x01(\t\x1a,\n\x08Response\x12 \n\x08metainfo\x18\x01 \x03(\x0b\x32\x0e.tfrecord_meta')
  ,
  dependencies=[dataset__pb2.DESCRIPTOR,])




_LOGTFRECORDSVERSION_RESPONSE = _descriptor.Descriptor(
  name='Response',
  full_name='LogTfrecordsVersion.Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response', full_name='LogTfrecordsVersion.Response.response', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='response_code', full_name='LogTfrecordsVersion.Response.response_code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=153,
  serialized_end=204,
)

_LOGTFRECORDSVERSION = _descriptor.Descriptor(
  name='LogTfrecordsVersion',
  full_name='LogTfrecordsVersion',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='token', full_name='LogTfrecordsVersion.token', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='experiment_id', full_name='LogTfrecordsVersion.experiment_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='metainfo', full_name='LogTfrecordsVersion.metainfo', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='version', full_name='LogTfrecordsVersion.version', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_LOGTFRECORDSVERSION_RESPONSE, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=41,
  serialized_end=204,
)


_GETTFRECORDSVERSION_RESPONSE = _descriptor.Descriptor(
  name='Response',
  full_name='GetTfrecordsVersion.Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='metainfo', full_name='GetTfrecordsVersion.Response.metainfo', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=267,
  serialized_end=311,
)

_GETTFRECORDSVERSION = _descriptor.Descriptor(
  name='GetTfrecordsVersion',
  full_name='GetTfrecordsVersion',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='token', full_name='GetTfrecordsVersion.token', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='experiment_id', full_name='GetTfrecordsVersion.experiment_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_GETTFRECORDSVERSION_RESPONSE, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=206,
  serialized_end=311,
)

_LOGTFRECORDSVERSION_RESPONSE.containing_type = _LOGTFRECORDSVERSION
_LOGTFRECORDSVERSION.fields_by_name['metainfo'].message_type = dataset__pb2._TFRECORD_META
_GETTFRECORDSVERSION_RESPONSE.fields_by_name['metainfo'].message_type = dataset__pb2._TFRECORD_META
_GETTFRECORDSVERSION_RESPONSE.containing_type = _GETTFRECORDSVERSION
DESCRIPTOR.message_types_by_name['LogTfrecordsVersion'] = _LOGTFRECORDSVERSION
DESCRIPTOR.message_types_by_name['GetTfrecordsVersion'] = _GETTFRECORDSVERSION
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

LogTfrecordsVersion = _reflection.GeneratedProtocolMessageType('LogTfrecordsVersion', (_message.Message,), dict(

  Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), dict(
    DESCRIPTOR = _LOGTFRECORDSVERSION_RESPONSE,
    __module__ = 'dataset_version_pb2'
    # @@protoc_insertion_point(class_scope:LogTfrecordsVersion.Response)
    ))
  ,
  DESCRIPTOR = _LOGTFRECORDSVERSION,
  __module__ = 'dataset_version_pb2'
  # @@protoc_insertion_point(class_scope:LogTfrecordsVersion)
  ))
_sym_db.RegisterMessage(LogTfrecordsVersion)
_sym_db.RegisterMessage(LogTfrecordsVersion.Response)

GetTfrecordsVersion = _reflection.GeneratedProtocolMessageType('GetTfrecordsVersion', (_message.Message,), dict(

  Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), dict(
    DESCRIPTOR = _GETTFRECORDSVERSION_RESPONSE,
    __module__ = 'dataset_version_pb2'
    # @@protoc_insertion_point(class_scope:GetTfrecordsVersion.Response)
    ))
  ,
  DESCRIPTOR = _GETTFRECORDSVERSION,
  __module__ = 'dataset_version_pb2'
  # @@protoc_insertion_point(class_scope:GetTfrecordsVersion)
  ))
_sym_db.RegisterMessage(GetTfrecordsVersion)
_sym_db.RegisterMessage(GetTfrecordsVersion.Response)


# @@protoc_insertion_point(module_scope)
